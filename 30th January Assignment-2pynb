{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3101bccc-608a-40b6-a453-3b6f305014bb",
   "metadata": {},
   "source": [
    "30th January Assignment-2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f218157-a168-443c-8421-13c4dc565364",
   "metadata": {},
   "source": [
    "only answers are written:---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d277d908-a73e-4e9d-874e-26b63ef07f51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Give Your Marks 92\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grade A\n"
     ]
    }
   ],
   "source": [
    "# Ans:1\n",
    "\n",
    "marks = int(input(\"Give Your Marks\"))\n",
    "if marks > 90:\n",
    "    print(\"Grade A\")\n",
    "elif marks > 80 and marks <= 90:\n",
    "    print(\"Grade B\")\n",
    "elif marks >= 60 and marks <= 80:\n",
    "    print(\"Grade C\")\n",
    "else:\n",
    "    print(\"Grade D\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "35898321-9fb4-42c4-8695-50b9da39ea9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Give your Bike price 110000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15% Tax is paid on this bike\n"
     ]
    }
   ],
   "source": [
    "# Ans:2\n",
    "\n",
    "cost_price_of_bike = int(input(\"Give your Bike price\"))\n",
    "if cost_price_of_bike > 100000:\n",
    "    print(\"15% Tax is paid on this bike\")\n",
    "elif cost_price_of_bike > 50000 and cost_price_of_bike <= 100000:\n",
    "    print(\"10% Tax is paid on this bike\")\n",
    "else:\n",
    "    print(\"5% Tax is paid on this bike\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cbd8381d-33ba-40b6-8ade-a7fc65f78e43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "City Name Agra\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Taj Mahal\n"
     ]
    }
   ],
   "source": [
    "# Ans:3\n",
    "\n",
    "city = input(\"City Name\")\n",
    "if city == \"Delhi\":\n",
    "    print(\"Red Fort\")\n",
    "elif city == \"Agra\":\n",
    "    print(\"Taj Mahal\")\n",
    "elif city == \"Jaipur\":\n",
    "    print(\"Jal Mahal\")\n",
    "else:\n",
    "    print(\"city is not mention\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ddeb18be-a4ce-45aa-a262-13a9352ffd91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Give your number 99\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of times 99 is divisible by 3 is 33.0\n"
     ]
    }
   ],
   "source": [
    "# Ans:4\n",
    "\n",
    "number = int(input(\"Give your number\"))\n",
    "if number > 10:\n",
    "    result = number/3\n",
    "    print(\"Total number of times\", number, \"is divisible by 3 is\", result)\n",
    "else:\n",
    "    print(number, \"is less than 10\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a736a4f4-8dd0-4de0-b69f-a5f61d5a1b10",
   "metadata": {},
   "source": [
    "Ans:5) \n",
    "\n",
    "The While statement simply loops until a condition is false. We use While Loop when we don't have a tidy data structure to iterate through, or when we don't have a generator function that drives our processing.\n",
    "While Loop is an indefinite iteration that is used when a loop repeats unknown number of times and end when some condition is met."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b1b07a59-432b-4210-8051-e3cd3004546f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0\n",
      "0   0\n",
      "0     0\n",
      "0       0\n",
      "0         0\n",
      "0 1 2 3 4 \n",
      "0 2 4 6 8 \n",
      "0 3 6 9 12 \n",
      "0 4 8 12 16 \n",
      "0 5 10 15 20 \n",
      "1 \n",
      "1 2 \n",
      "1 2 3 \n",
      "1 2 3 4 \n",
      "1 2 3 4 5 \n"
     ]
    }
   ],
   "source": [
    "# Ans:6\n",
    "# Pattern-1\n",
    "num =0\n",
    "while num < 5:\n",
    "    print('0', end=' ')\n",
    "    num1 = 0\n",
    "    while num1 < num:\n",
    "        print(' ', end=' ')\n",
    "        num1 +=1\n",
    "    print('0')\n",
    "    num +=1\n",
    "    \n",
    "    \n",
    "\n",
    "    \n",
    "# Pattern-2\n",
    "a =1 \n",
    "while a <= 5:\n",
    "    b = 0\n",
    "    while b <= 4:\n",
    "        print(a*b, end=' ')\n",
    "        b += 1\n",
    "    print()\n",
    "    a += 1\n",
    "    \n",
    "\n",
    "\n",
    "# Pattern-3\n",
    "n = 1\n",
    "while n <= 5:\n",
    "    m = 1\n",
    "    while m <= n:\n",
    "        print(m, end=\" \")\n",
    "        m = m+1\n",
    "    print(\"\")\n",
    "    n = n+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4db7e766-fab2-4b69-a1de-b896d7caee09",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "9\n",
      "8\n",
      "7\n",
      "6\n",
      "5\n",
      "4\n",
      "3\n",
      "2\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "# Ans:7\n",
    "\n",
    "l = 10\n",
    "while l >= 1:\n",
    "    print(l)\n",
    "    l = l-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5088691c-dc2d-42ac-90dd-f4c8f459eae6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
